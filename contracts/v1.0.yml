#Swagger contract for User API
openapi: 3.0.0
info:
  title: User API
  description: ''
  contact: {}
  version: '1.0'
servers:
- url: http://localhost:81/v1/
  variables: {}
paths:
  "/user":
    post:
      summary: Create a new User
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateUser'
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        400:
          description: User Id not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 4
                message: User Id value is not a valid integer.
                errors:
                  - { "field": "email", "message": "The email teste134est.com is not a valid email."}
                  - { "field": "givenName", "message": "Given name cannot be longer than 30 characters"}
                  - { "field": "familyName", "message": "Family name should not be blank."}
  /user/{id}:
    put:
      summary: Update User
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateUser'
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 1
                message: User with id 232 not found
                errors: []
        400:
          description: User Id not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 4
                message: User Id value is not a valid integer.
                errors:
                  - { "field": "email", "message": "The email teste134est.com is not a valid email."}
                  - { "field": "givenName", "message": "Given name cannot be longer than 30 characters"}
    get:
      summary: Get a user by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 1
                message: User with id 232 not found
                errors: []
        400:
          description: User Id not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 4
                message: User Id value is not a valid integer.
                errors: []
    delete:
      summary: Delete a user by Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: 'User deleted'
          content:
            application/json:
              example: '{}'
        400:
          description: User Id not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 4
                message: User Id value is not a valid integer.
                errors: []
components:
  schemas:
    RequestCreateUser:
      required:
      - email
      - givenName
      - familyName
      type: object
      properties:
        email:
          type: string
          example: myemail@gmail.com
        givenName:
          type: string
          example: Belgacem
        familyName:
          type: string
          example: Tlili
    RequestUpdateUser:
      type: object
      properties:
        email:
          type: string
          example: myemail@gmail.com
        givenName:
          type: string
          example: Belgacem
        familyName:
          type: string
          example: Tlili
    ResponseUser:
      required:
      - id
      - email
      - givenName
      - familyName
      - createdAt
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        email:
          type: string
          example: myemail@gmail.com
        givenName:
          type: string
          example: Belgacem
        familyName:
          type: string
          example: Tlili
        createdAt:
          type: string
          format: date-time
          example: "YYYY-MM-DD HH:MM:SS"
    ResponseError:
      required:
      - code
      - message
      - errors
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 1
        message:
          type: string
          example: User with id {id} not found
        errors:
          type: array
          items:
            type: string
    ValidationError:
      required:
      - field
      - message
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: The email teste134est.comis not a valid email.
  securitySchemes:
    api-key:
      type: apiKey
      description: API consumer KEY
      name: x-api-key
      in: header
security:
- api-key: []